# ids = id von jeder gruppe (7 leicht, 7 mittel, 7 schwer)von stimulis (datensatzt dafür erstellen)
overallutility <- function(stimuli){
# mit den stimuli eine subutility für nichtwiederholende x und y
subutility1 <- stimuli[!duplicated(designid)][, sum(!duplicated(x) | !duplicated(y))/.N]
# subutility für nichtwiederholende x_r und y_r
subutility2 <- stimuli[!duplicated(designid)][, sum(!duplicated(x_r) | !duplicated(y_r))/.N]
# 1/3 * subutility1 + 1/3 * subutility 2 + 1/3 * subutility 3
return(1/2 * subutility1 + 1/2 * subutility2)
}
# ids <- merge(res[t == 1],ids, by = "designid")
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1] # ich könnte das rare event auch in px suchen
res
drawdesign <-function(res){
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel]
set.seed(12345)
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
design[,sum(rareevent), by = designid]
length(unique(design$designid))
design[order(difficultylevel)]
drawdesign <-function(res){
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) &
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) &
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) &
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) &
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) &
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
set.seed(12345)
design  <- drawdesign(res = res)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
design[,sum(rareevent), by = designid]
prob_cutoff_d <- c(0, 0.6)
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.6)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= 1) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.6)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= 1) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  6                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  6 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  6 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.6)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= 1) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  5                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  5 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  5 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.6)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= 1) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
# ids <- merge(res[t == 1],ids, by = "designid")
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1] # ich könnte das rare event auch in px suchen
drawdesign <-function(res){
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel]
set.seed(12345)
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
design[,sum(rareevent), by = designid]
length(unique(design$designid))
drawdesign <-function(res){
res[(sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
set.seed(12345)
design  <- drawdesign(res = res)
drawdesign <-function(res){
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
design  <- drawdesign(res = res)
design
prob_cutoff_d <- c(0, 0.5)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= 1) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel == 3]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 | px >= 0.9 | px <= 0.1] # ich könnte das rare event auch in px suchen
# ids <- merge(res[t == 1],ids, by = "designid")
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 | px >= 0.9 | px <= 0.1] # ich könnte das rare event auch in px suchen
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel == 3]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel]
res[, sum(rareevent)]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = list(difficultylevel, designid)]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = designid]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = list(difficultylevel, designid)]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = designid]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = unique(designid)]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = sum(designid)]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = sum(unique(designid))]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = sum(unique(designid))]
# check if there are rare events in every difficultylevel
res[,sum(rareevent), by = difficultylevel]
View(design)
res <- fread(file = "all_stimuli.csv")
#install.packages("pacman")
pacman::p_load(data.table)
res <- fread(file = "all_stimuli.csv")
View(res)
View(res)
#install.packages("pacman")
pacman::p_load(data.table)
res <- fread(file = "all_stimuli.csv")
res$designid <- paste(res$bid, res$pairid)
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.5)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= .9) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
overallutility <- function(stimuli){
# mit den stimuli eine subutility für nichtwiederholende x und y
subutility1 <- stimuli[!duplicated(designid)][, sum(!duplicated(x) | !duplicated(y))/.N]
# subutility für nichtwiederholende x_r und y_r
subutility2 <- stimuli[!duplicated(designid)][, sum(!duplicated(x_r) | !duplicated(y_r))/.N]
# 1/3 * subutility1 + 1/3 * subutility 2 + 1/3 * subutility 3
return(1/2 * subutility1 + 1/2 * subutility2)
}
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 | px >= 0.9 | px <= 0.1] # ich könnte das rare event auch in px suchen:
res <- na.omit(res)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent == T), by = difficultylevel]
set.seed(5476)
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
length(unique(design$designid))
temp <- design[t == 1]
n <- 0
while(n < 5000) {
proposaldesign <- drawdesign(res = res)
proposalutility <- overallutility(stimuli = proposaldesign)
if (proposalutility > utility) {
utility <- proposalutility
design <- proposaldesign
}
n = n + 1
}
View(design)
design[order(difficultylevel)]
View(design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.5)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= .85) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
overallutility <- function(stimuli){
# mit den stimuli eine subutility für nichtwiederholende x und y
subutility1 <- stimuli[!duplicated(designid)][, sum(!duplicated(x) | !duplicated(y))/.N]
# subutility für nichtwiederholende x_r und y_r
subutility2 <- stimuli[!duplicated(designid)][, sum(!duplicated(x_r) | !duplicated(y_r))/.N]
# 1/3 * subutility1 + 1/3 * subutility 2 + 1/3 * subutility 3
return(1/2 * subutility1 + 1/2 * subutility2)
}
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 | px >= 0.9 | px <= 0.1] # ich könnte das rare event auch in px suchen:
res <- na.omit(res)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent == T), by = difficultylevel]
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
n <- 0
temp <- design[t == 1]
View(temp)
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.5)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= .8) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
overallutility <- function(stimuli){
# mit den stimuli eine subutility für nichtwiederholende x und y
subutility1 <- stimuli[!duplicated(designid)][, sum(!duplicated(x) | !duplicated(y))/.N]
# subutility für nichtwiederholende x_r und y_r
subutility2 <- stimuli[!duplicated(designid)][, sum(!duplicated(x_r) | !duplicated(y_r))/.N]
# 1/3 * subutility1 + 1/3 * subutility 2 + 1/3 * subutility 3
return(1/2 * subutility1 + 1/2 * subutility2)
}
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 | px >= 0.9 | px <= 0.1] # ich könnte das rare event auch in px suchen:
res <- na.omit(res)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent == T), by = difficultylevel]
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
length(unique(design$designid))
temp <- design[t == 1]
View(temp)
View(temp)
n <- 0
while(n < 5000) {
proposaldesign <- drawdesign(res = res)
proposalutility <- overallutility(stimuli = proposaldesign)
if (proposalutility > utility) {
utility <- proposalutility
design <- proposaldesign
}
n = n + 1
}
View(temp)
# zuerst mit allen, wenns nicht funktioniert: schliesse das erste und letzte trial aus um die funktion anzuwenden
#versuch 1
# limiting the range of p
prob_cutoff_e <- c(0.95, 1)
prob_cutoff_m <- c(0.5, 1)
prob_cutoff_d <- c(0, 0.5)
# limiting the range of b
b_cutoff_e <- c(0, 10)
b_cutoff_m <- c(10, 25)
b_cutoff_d <- c(25, 45)
assigndifficulty <- function(level, prange, brange, p, b) { # difficultylevel = ids bis jetzt
condition <- b > brange[1] & b <= brange[2] & p > prange[1] & p <= prange[2]
#wenn b grösser oder kleiner ist als brange & wenn alle p grösser oder kleiner als prange dann return difficultylevel, ansonsten NA returnen
if(mean(as.numeric(condition)) >= .8) {
return(rep(level,length(p)))
} else {
return(rep(NA, length(p)))
}
}
#zum testen:
res[,difficultylevel := NULL]
res[t <  4                         , difficultylevel := assigndifficulty(level = 1, prange = prob_cutoff_e, brange = b_cutoff_e, p = ps, b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 2, prange = prob_cutoff_m, brange = b_cutoff_m, p = pmax(ps, pr), b = b), by = designid]
res[t <  4 & is.na(difficultylevel), difficultylevel := assigndifficulty(level = 3, prange = prob_cutoff_d, brange = b_cutoff_d, p = ps, b = b), by = designid]
res[,difficultylevel := difficultylevel[t == 1] , by = designid]
res[,.N, by = difficultylevel]
overallutility <- function(stimuli){
# mit den stimuli eine subutility für nichtwiederholende x und y
subutility1 <- stimuli[!duplicated(designid)][, sum(!duplicated(x) | !duplicated(y))/.N]
# subutility für nichtwiederholende x_r und y_r
subutility2 <- stimuli[!duplicated(designid)][, sum(!duplicated(x_r) | !duplicated(y_r))/.N]
# 1/3 * subutility1 + 1/3 * subutility 2 + 1/3 * subutility 3
return(1/2 * subutility1 + 1/2 * subutility2)
}
res[, rareevent := NULL]
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 ] # ich könnte das rare event auch in px suchen: | px >= 0.9 | px <= 0.1
res[, rareevent := px_r >= 0.9 | px_r <= 0.1 ] # ich könnte das rare event auch in px suchen: | px >= 0.9 | px <= 0.1
res <- na.omit(res)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent == T), by = difficultylevel]
design  <- drawdesign(res = res)
utility <- overallutility(stimuli = design)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
# check if there are rare events in every difficultylevel
res[,sum(rareevent == T), by = difficultylevel]
#check if there are reare events in design
design[,sum(rareevent), by = difficultylevel]
length(unique(design$designid))
temp <- design[t == 1]
View(temp)
design  <- drawdesign(res = res)
drawdesign <- function(res) {
res[(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == T], 2)) |
(difficultylevel == 1 & designid %in% sample(designid[difficultylevel == 1 & rareevent == F], 5)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == T], 2)) |
(difficultylevel == 2 & designid %in% sample(designid[difficultylevel == 2 & rareevent == F], 5)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == T], 2)) |
(difficultylevel == 3 & designid %in% sample(designid[difficultylevel == 3 & rareevent == F], 5)), ]
}
design  <- drawdesign(res = res)
