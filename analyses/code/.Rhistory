# loading data table (if not already loaded)
pacman::p_load(data.table)
# select working directory
setwd("C:/Users/mathi/Desktop/Goals-and-experience/analyses/code")
#writing the stimuli into a csv file
fwrite(design, file = "C:/Users/mathi/Desktop/Goals-and-experience/analyses/code/stimuli_auswahl.csv")
#reading the stimuli
temp <- fread(file = "stimuli_auswahl.csv")
View(temp)
temp <- temp[order(difficultylevel, rareevent)]
#reading the stimuli
temp <- fread(file = "stimuli_auswahl_ergänzt.csv")
#reading the stimuli
temp2 <- fread(file = "stimuli_auswahl.csv")
temp2 <- temp[t == 1]
temp2 <- temp[order(difficultylevel, rareevent)]
View(temp2)
View(temp)
View(temp)
# loading data table (if not already loaded)
pacman::p_load(data.table)
e <- NULL
e <- temp[3,]
e[, "x_r" := 0]
e[, "px_r" := 0.6]
e[, "y_r" := 1]
e[, "py_r" := 0.4]
e[, "x" := 2]
e[, "px" := 0.7]
e[, "y" := 3]
e[, "py" := 0.3]
e[, "b" := 10]
e
f <- NULL
f <- temp[3,]
f[, "x_r" := 1]
f[, "px_r" := 0.6]
f[, "y_r" := 2]
f[, "py_r" := 0.4]
f[, "x" := 7]
f[, "px" := 0.3]
f[, "y" := 8]
f[, "py" := 0.7]
f[, "b" := 35]
f[, "difficultylevel" := 2]
f
g <- NULL
g <- temp[3,]
g[, "x_r" := 3]
g[, "px_r" := 0.4]
g[, "y_r" := 4]
g[, "py_r" := 0.6]
g[, "x" := 10]
g[, "px" := 0.3]
g[, "y" := 9]
g[, "py" := 0.7]
g[, "b" := 45]
g[, "difficultylevel" := 3]
g
#binding the new lotteries to the existing ones
M <- rbind(temp, e)
M <- rbind(temp, f)
M <- rbind(temp, g)
View(M)
# install.packages("pacman")
# clear environment to make sure no bugs happen if run multiple times in the same session
rm(list = ls(all.names = TRUE))
# loading data table (if not already loaded)
pacman::p_load(data.table)
e <- NULL
e <- temp[3,]
e[, "x_r" := 0]
e[, "px_r" := 0.6]
e[, "y_r" := 1]
e[, "py_r" := 0.4]
e[, "x" := 2]
e[, "px" := 0.7]
e[, "y" := 3]
e[, "py" := 0.3]
e[, "b" := 10]
M <- fread(file = "stimuli_auswahl_ergänzt.csv")
View(M)
View(M)
A <- fread(file = "stimuli_auswahl_ergänzt.csv")
View(A)
#binding the new lotteries to the existing ones
M <- M[22:24,]
View(M)
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = gambles, choicerule = NULL)
library(devtools)
library(cognitivemodels)
library(cognitiveutils)
library(data.table)
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = gambles, choicerule = NULL)
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = attentienchecks, choicerule = NULL)
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = attentionchecks, choicerule = NULL)
#binding the new lotteries to the existing ones
attentionchecks <- M[22:24,]
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = attentionchecks, choicerule = NULL)
View(attentionchecks)
# install.packages("pacman")
# clear environment to make sure no bugs happen if run multiple times in the same session
rm(list = ls(all.names = TRUE))
A <- fread(file = "stimuli_auswahl_ergänzt.csv")
#binding the new lotteries to the existing ones
attentionchecks <- A[22:24,]
M <- hm1988(formula = ~ x+px+y+py | x_r+px_r+y_r+py_r,
trials = ".ALL", states = ".ALL" , budget = ~b , ntrials = 5,
initstate = 0, data = attentionchecks, choicerule = NULL)
sim <- data.table(
s = M$get_states(), #states = accumulated points in trials beforehand
t = 6-M$get_timehorizons(), # 6- m$get_timehorizon = number of trials, as get_timehorizon = trials left
predict(M) # predict = prediction of choice
)
View(sim)
setnames(sim, c("xp", "x_"), c("ps", "pr"))
View(sim)
sim$bid <- cumsum(sim$t == 1)
View(sim)
# install.packages("pacman")
# clear environment to make sure no bugs happen if run multiple times in the same session
rm(list = ls(all.names = TRUE))
#reading the stimuli
temp <- fread(file = "stimuli_auswahl_ergänzt.csv")
View(temp)
temp <- design[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
temp <- temp[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
#reading the stimuli
temp <- fread(file = "stimuli_auswahl.csv")
temp <- temp[order(difficultylevel, rareevent)]
temp <- temp[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
a <- NULL
a <- temp[3,]
a[, "x_r" := x_r + 3]
a[, "y_r" := y_r + 3]
a[, "x" := x + 3]
a[, "y" := y + 3]
a[, "b" := b + (5 * 3)]
a
b = NULL
b <- temp[14,]
b[, "x_r" := x_r + 3]
b[, "y_r" := y_r + 3]
b[, "x" := x + 3]
b[, "y" := y + 3]
b[, "b" := b + (5 * 3)]
b
c <- NULL
c <- temp[15,]
c[, "x_r" := x_r + 3]
c[, "y_r" := y_r + 3]
c[, "x" := x + 3]
c[, "y" := y + 3]
c[, "b" := b + (5 * 3)]
c
d <- NULL
d <- temp[17,]
d[, "x_r" := x_r + 3]
d[, "y_r" := y_r + 3]
d[, "x" := x + 3]
d[, "y" := y + 3]
d[, "b" := b + (5 * 3)]
d
#adding the new constructed lotteries into temp again
temp <- rbind(temp, a)
temp <- rbind(temp, b)
temp <- rbind(temp, c)
temp <- rbind(temp, d)
#ordering temp again
temp <- temp[order(difficultylevel, rareevent)]
#writing the stimuli into a csv file
fwrite(design, file = "C:/Users/mathi/Desktop/Goals-and-experience/analyses/code/stimuli_auswahl_ergänzt.csv")
e[x = 0]
#constructing attention checks
e <- NULL
e[x = 0]
e[x := 0]
e[,x := 0]
e[,"x" := 0]
e[,"x" = 0]
e <- NULL
e<- temp[3,]
e[, "x_r" := 0]
e[, "px_r" := 0.7]
e[, "y_r" := 1]
e[, "py_r" := 0.3]
e[, "x" :=2]
e[, "px" := 0.7]
e[, "y" := 3]
e[, "py":= 0.3]
e[, "b" := 10]
e
f <- NULL
f<- temp[3,]
f[, "x_r" := 1]
f[, "px_r" := 0.7]
f[, "y_r" := 2]
f[, "py_r" := 0.3]
f[, "x" := 7]
f[, "px" := 0.7]
f[, "y" := 8]
f[, "py":= 0.3]
f[, "b" := 35]
f
g <- NULL
g<- temp[3,]
g[, "x_r" := 3]
g[, "px_r" := 0.7]
g[, "y_r" := 4]
g[, "py_r" := 0.3]
g[, "x" := 9]
g[, "px" := 0.7]
g[, "y" := 10]
g[, "py":= 0.3]
g[, "b" := 45]
g
temp <- rbind(temp, e)
temp <- rbind(temp, f)
temp <- rbind(temp, g)
temp <- temp[order(difficultylevel, rareevent)]
View(temp)
#reading the stimuli
temp <- fread(file = "stimuli_auswahl_ergänzt.csv")
temp <- temp[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
a <- NULL
a <- temp[3,]
a[, "x_r" := x_r + 3]
a[, "y_r" := y_r + 3]
a[, "x" := x + 3]
a[, "y" := y + 3]
a[, "b" := b + (5 * 3)]
a
b = NULL
b <- temp[14,]
b[, "x_r" := x_r + 3]
b[, "y_r" := y_r + 3]
b[, "x" := x + 3]
b[, "y" := y + 3]
b[, "b" := b + (5 * 3)]
b
c <- NULL
c <- temp[15,]
c[, "x_r" := x_r + 3]
c[, "y_r" := y_r + 3]
c[, "x" := x + 3]
c[, "y" := y + 3]
c[, "b" := b + (5 * 3)]
c
d <- NULL
d <- temp[17,]
d[, "x_r" := x_r + 3]
d[, "y_r" := y_r + 3]
d[, "x" := x + 3]
d[, "y" := y + 3]
d[, "b" := b + (5 * 3)]
d
temp <- rbind(temp, a)
temp <- rbind(temp, b)
temp <- rbind(temp, c)
temp <- rbind(temp, d)
#ordering temp again
temp <- temp[order(difficultylevel, rareevent)]
#writing the stimuli into a csv file
fwrite(design, file = "C:/Users/mathi/Desktop/Goals-and-experience/analyses/code/stimuli_auswahl_ergänzt.csv")
#writing the stimuli into a csv file
fwrite(temp, file = "C:/Users/mathi/Desktop/Goals-and-experience/analyses/code/stimuli_auswahl_ergänzt.csv")
#reading the stimuli
temp <- fread(file = "stimuli_auswahl_ergänzt.csv")
temp <- temp[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
e <- NULL
e<- temp[3,]
e[, "x_r" := 0]
e[, "px_r" := 0.7]
e[, "y_r" := 1]
e[, "py_r" := 0.3]
e[, "x" :=2]
e[, "px" := 0.7]
e[, "y" := 3]
e[, "py":= 0.3]
e[, "b" := 10]
e[, "difficultylevel" := 1]
e
f <- NULL
f<- temp[3,]
f[, "x_r" := 1]
f[, "px_r" := 0.7]
f[, "y_r" := 2]
f[, "py_r" := 0.3]
f[, "x" := 7]
f[, "px" := 0.7]
f[, "y" := 8]
f[, "py":= 0.3]
f[, "b" := 35]
f[, "difficultylevel" := 2]
f
g <- NULL
g<- temp[3,]
g[, "x_r" := 3]
g[, "px_r" := 0.7]
g[, "y_r" := 4]
g[, "py_r" := 0.3]
g[, "x" := 9]
g[, "px" := 0.7]
g[, "y" := 10]
g[, "py":= 0.3]
g[, "b" := 45]
g[, "difficultylevel" := 3]
g
temp <- rbind(temp, e)
temp <- rbind(temp, f)
temp <- rbind(temp, g)
temp <- temp[order(difficultylevel, rareevent)]
View(temp)
# rename colums into: x1HV,x2HV,p1HV,p2HV,x1LV,x2LV,p1LV,p2LV,budget,state and only include
# (to get the configuration that sprites.R is coded for)
## sprites.R generates sprites to display lotteries on the experiment webpage
design_sprite <- rbind(temp[,.(x_r, y_r, px_r, py_r, x, y, px, py, b, s)])
colnames(design_sprite) <- c("x1HV","x2HV","p1HV","p2HV","x1LV","x2LV","p1LV","p2LV","budget","state")
# write .csv file into static of rsft-gain-loss-experiment folder replacing positive-gain.csv
fwrite(design_sprite[c(1:7)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_easy.csv")
fwrite(design_sprite[c(8:14)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_medium.csv")
fwrite(design_sprite[c(15:21)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_hard.csv")
# write .csv file into static of rsft-gain-loss-experiment folder replacing positive-gain.csv
fwrite(design_sprite[c(1:8)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_easy.csv")
fwrite(design_sprite[c(9:16)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_medium.csv")
fwrite(design_sprite[c(17:24)], file = "C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static/stimuli/stimuli_hard.csv")
rm(list=ls(all=TRUE))
library(data.table)
library(extrafont)
# THE BELOW IS JUST IF THE FONT READGING DOES NOT WORK
#extrafont::fonttable()
# fntbl <- fread(system.file("fontmap", "fonttable.csv", package="extrafontdb"))
# fntbl[FullName == 'Roboto Slab Thin', FamilyName := 'Roboto Slab Thin']
#fwrite(fntbl, system.file("fontmap", "fonttable.csv", package="extrafontdb"))
library(ggplot2)
library(scales)
setwd("C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static")
# Load stimuli ----------------------------------------------------------------
# Names of columns we would like to drop
drop_these_columns <- c("budget", "state")
# Load stimuli drop cols_to_drop
d <- rbindlist(lapply(list.files('stimuli', full = TRUE), fread, drop = drop_these_columns, fill = TRUE))
make_sprites <- function(d = d) {
d1 <- d[,1:(1/2*ncol(d)),]
d2 <- d[, (1/2*ncol(d)+1):ncol(d),]
setnames(d2, names(d1))
d <- rbind(d1,d2, fill = T)
d <- unique(d)
for (i in 1:nrow(d)) {
dd <- d[i]
dd[, id := 1:.N]
dd <- melt(dd, id = 'id', measure = list(1:2, 3:4), value = c('x','p'))
dd[, variablef := factor(x, levels = x, labels = paste0(ifelse(sign(x) == 1, "+", "-"), abs(x)))]
dd[, variablef2 := reorder(variablef, 2:1)]
plot_and_save(dd, 'variablef2', 1:2)
plot_and_save(dd, 'variablef2', 2:1)
}
}
plot_and_save <- function(dd, v, colorder) {
font_name <- "Arial"
cols <- c('grey89', 'grey68')
cols <- cols[colorder]
leg.l.margin <- -0.1 # margin from the left side of the plot to the point
leg.txt.r.margin <- -2 # margin at the right side of the text (outcome)
leg.txt.l.margin <- -3.5 # margin at the left side of the text (betwen point and outcome)
v <- "variablef2"
theplot <- ggplot(dd, aes_string(x = 0, fill = v, color = v, group = v)) +
geom_bar(aes(y = p), stat = 'identity', width = .2, color = NA) +
theme_void(base_family = font_name, base_size = 20) +
coord_flip() +
xlim(-.2,1) +
geom_point(aes(x = -100, y = p), size = .5) +
theme(
legend.direction = 'horizontal',
legend.position = c(0,0.5),
legend.justification = c(0, 0),
legend.key.width = unit(.2, 'lines'),
legend.key.height = unit(.01, 'lines'),
legend.title = element_blank(),
legend.margin = margin(l = leg.l.margin, r = .01, unit = 'lines'),
# the point and the outcome (legend of the bar)
legend.text = element_text(
size = 3,
margin = margin(r = leg.txt.r.margin, l = leg.txt.l.margin, unit = "lines")),
aspect.ratio = 1/1.6,
plot.margin = margin(0)) +
scale_fill_manual(values = cols) +
scale_color_manual(values = cols) +
guides(fill = 'none', color = guide_legend(reverse = TRUE,
override.aes = list(shape = 16))) +
# the text in the bar
geom_text(
aes(y = p, label = percent(p, accuracy = 1)),
position = position_stack(vjust = .5),
size = .65,
family = font_name,
color = 'black')
fn <- dd[order(variablef), paste(x[1], sprintf("%.0f", p[1] * 100), x[2], collapse='_', sep='_')]
fn <- paste0('sprite_', fn, '_featurecolor', paste0(colorder-1, collapse = ''), '.png')
print(fn)
ggsave(plot = theplot, filename = file.path('sprites', fn), width = 0.5, height = 0.5/1.6, units='in', dpi = 600)
}
make_sprites(d = d)
rm(list=ls(all=TRUE))
library(data.table)
library(extrafont)
# THE BELOW IS JUST IF THE FONT READGING DOES NOT WORK
#extrafont::fonttable()
# fntbl <- fread(system.file("fontmap", "fonttable.csv", package="extrafontdb"))
# fntbl[FullName == 'Roboto Slab Thin', FamilyName := 'Roboto Slab Thin']
#fwrite(fntbl, system.file("fontmap", "fonttable.csv", package="extrafontdb"))
library(ggplot2)
library(scales)
setwd("C:/Users/mathi/Desktop/Goals-and-experience/experiment/code/rsft-gain-loss-experiment-master/rsft_gain_loss_experiment/static")
# Load stimuli ----------------------------------------------------------------
# Names of columns we would like to drop
drop_these_columns <- c("budget", "state")
# Load stimuli drop cols_to_drop
d <- rbindlist(lapply(list.files('stimuli', full = TRUE), fread, drop = drop_these_columns, fill = TRUE))
make_sprites <- function(d = d) {
d1 <- d[,1:(1/2*ncol(d)),]
d2 <- d[, (1/2*ncol(d)+1):ncol(d),]
setnames(d2, names(d1))
d <- rbind(d1,d2, fill = T)
d <- unique(d)
for (i in 1:nrow(d)) {
dd <- d[i]
dd[, id := 1:.N]
dd <- melt(dd, id = 'id', measure = list(1:2, 3:4), value = c('x','p'))
dd[, variablef := factor(x, levels = x, labels = paste0(ifelse(sign(x) == 1, "+", "-"), abs(x)))]
dd[, variablef2 := reorder(variablef, 2:1)]
plot_and_save(dd, 'variablef2', 1:2)
plot_and_save(dd, 'variablef2', 2:1)
}
}
plot_and_save <- function(dd, v, colorder) {
font_name <- "Arial"
cols <- c('grey89', 'grey68')
cols <- cols[colorder]
leg.l.margin <- -0.1 # margin from the left side of the plot to the point
leg.txt.r.margin <- -2 # margin at the right side of the text (outcome)
leg.txt.l.margin <- -3.5 # margin at the left side of the text (betwen point and outcome)
v <- "variablef2"
theplot <- ggplot(dd, aes_string(x = 0, fill = v, color = v, group = v)) +
#geom_bar(aes(y = p), stat = 'identity', width = .2, color = NA) +
theme_void(base_family = font_name, base_size = 20) +
coord_flip() +
xlim(-.2,1) +
geom_point(aes(x = -100, y = p), size = .5) +
theme(
legend.direction = 'horizontal',
legend.position = c(0,0.5),
legend.justification = c(0, 0),
legend.key.width = unit(.2, 'lines'),
legend.key.height = unit(.01, 'lines'),
legend.title = element_blank(),
legend.margin = margin(l = leg.l.margin, r = .01, unit = 'lines'),
# the point and the outcome (legend of the bar)
legend.text = element_text(
size = 3,
margin = margin(r = leg.txt.r.margin, l = leg.txt.l.margin, unit = "lines")),
aspect.ratio = 1/1.6,
plot.margin = margin(0)) +
scale_fill_manual(values = cols) +
scale_color_manual(values = cols) +
guides(fill = 'none', color = guide_legend(reverse = TRUE,
override.aes = list(shape = 16))) +
#the text in the bar
geom_text(
aes(y = p, label = percent(p, accuracy = 1)),
position = position_stack(vjust = .5),
size = 0,
family = font_name,
color = 'black')
fn <- dd[order(variablef), paste(x[1], sprintf("%.0f", p[1] * 100), x[2], collapse='_', sep='_')]
fn <- paste0('sprite_', fn, '_featurecolor', paste0(colorder-1, collapse = ''), '.png')
print(fn)
ggsave(plot = theplot, filename = file.path('sprites_experience', fn), width = 0.5, height = 0.5/1.6, units='in', dpi = 600)
}
make_sprites(d = d)
# install.packages("pacman")
# clear environment to make sure no bugs happen if run multiple times in the same session
rm(list = ls(all.names = TRUE))
# loading data table (if not already loaded)
pacman::p_load(data.table)
# select working directory
setwd("C:/Users/mathi/Desktop/Goals-and-experience/analyses/code")
# read in all stimuli
res <- fread(file = "all_stimuli.csv")
#reading the stimuli
temp <- fread(file = "stimuli_auswahl_ergänzt.csv")
temp <- temp[t == 1]
temp <- temp[order(difficultylevel, rareevent)]
View(temp)
temp <- temp[order(difficultylevel, rareevent)]
View(temp)
View(temp)
